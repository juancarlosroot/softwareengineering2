/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scanner;

import graph.Graph;
import graphreduction.BooleanExpressionsManager;
import graphreduction.CGraph;
import graphreduction.CGraphManager;
import graphreduction.CNode;
import highlight.JEditTextArea;
import java.awt.GridLayout;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import logic.TruthTable;

/**
 *
 * @author juancarlosroot
 */
public class MainWindow extends javax.swing.JFrame {

    Graph newGraph = null;

    String[] as_columns1 = new String[]{
        "Major Clause", "Set of possible Tests"
    };
    String[] as_columns2 = new String[]{
        "-", "-", "-"
    };
    String[] as_columns3 = new String[]{
        "-"
    };
    DefaultTableModel model1;
    DefaultTableModel model2;
    DefaultTableModel model3;

    TruthTable truthTable = null;
    /*cadena que se usa para el graphviz*/
    String msj = "";
    String mm;
    String allDefs = "";
    String allUses = "";
    /*variable del nombre del archivo*/
    String fileName;
    /**
     * Creates new form Entorno
     */
    JEditTextArea je = new JEditTextArea();
    parser p;
    /**
     * Creates new form MainWindow
     */
    /**
     * al generar la cadena del grafo, esta se puede repetir, para eso uso esta
     * lista
     */
    ArrayList<String> added = new ArrayList<String>();
    /**
     * esta lista sirve para añadir los identificadores de los nodos, así cuando
     * cuento los nodos, uso una función hash
     */
    HashSet<Integer> labels = new HashSet<Integer>();

    /**
     * realizo una busqueda en profundidad para obtener las cadenas para el
     * graphviz
     *
     * @param n
     */
    public MainWindow() {
        initComponents();
        jTextArea2.setVisible(false);
        jScrollPane4.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldInitNodes = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldFinalNodes = new javax.swing.JTextField();
        jButtonPrimePaths = new javax.swing.JButton();
        jButtonEPC = new javax.swing.JButton();
        jButtonDefs = new javax.swing.JButton();
        jButtonUses = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        scrollPane = new javax.swing.JScrollPane();
        jLabelGraph = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        TruthTable = new javax.swing.JButton();
        GACC = new javax.swing.JButton();
        CACC = new javax.swing.JButton();
        RACC = new javax.swing.JButton();
        GICC = new javax.swing.JButton();
        RICC = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jComboBoxBooleanExp = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setText("Initial Nodes : ");

        jTextFieldInitNodes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldInitNodesActionPerformed(evt);
            }
        });

        jLabel4.setText("Final Nodes : ");

        jButtonPrimePaths.setText("Prime Paths");
        jButtonPrimePaths.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrimePathsActionPerformed(evt);
            }
        });

        jButtonEPC.setText("EPC");
        jButtonEPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEPCActionPerformed(evt);
            }
        });

        jButtonDefs.setText("Defs");
        jButtonDefs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDefsActionPerformed(evt);
            }
        });

        jButtonUses.setText("Uses");
        jButtonUses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUsesActionPerformed(evt);
            }
        });

        RecreateTable3();
        jTable3.setModel(model3);
        jScrollPane3.setViewportView(jTable3);

        scrollPane.setViewportView(jLabelGraph);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jTextFieldInitNodes, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4))
                            .addGap(152, 152, 152))
                        .addComponent(jTextFieldFinalNodes, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonPrimePaths, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonDefs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonUses, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonEPC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addGap(26, 26, 26)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 759, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldInitNodes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldFinalNodes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonPrimePaths)
                            .addComponent(jButtonEPC))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonDefs)
                            .addComponent(jButtonUses))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 173, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(scrollPane)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Graph Coverage", jPanel1);

        jLabel1.setText("P = ");

        TruthTable.setText("Truth Table");
        TruthTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TruthTableActionPerformed(evt);
            }
        });

        GACC.setText("GACC");
        GACC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GACCActionPerformed(evt);
            }
        });

        CACC.setText("CACC");
        CACC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CACCActionPerformed(evt);
            }
        });

        RACC.setText("RACC");
        RACC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RACCActionPerformed(evt);
            }
        });

        GICC.setText("GICC");
        GICC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GICCActionPerformed(evt);
            }
        });

        RICC.setText("RICC");
        RICC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RICCActionPerformed(evt);
            }
        });

        RecreateTable1();
        jTable1.setModel(model1);
        jScrollPane1.setViewportView(jTable1);

        RecreateTable2();
        jTable2.setModel(model2);
        jScrollPane2.setViewportView(jTable2);

        jComboBoxBooleanExp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(GACC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CACC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RACC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GICC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RICC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TruthTable)
                .addContainerGap())
            .addComponent(jSeparator1)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxBooleanExp, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxBooleanExp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TruthTable)
                    .addComponent(GACC)
                    .addComponent(CACC)
                    .addComponent(RACC)
                    .addComponent(GICC)
                    .addComponent(RICC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(161, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Logic Coverage", jPanel2);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane4.setViewportView(jTextArea2);

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel2.setText("CINVESTAV-Unidad Guadalajara");

        ImageIcon imageIcon =
        new ImageIcon(
            new ImageIcon(getClass().getResource("/cinves2.png")).getImage().getScaledInstance(
                132,
                132,
                Image.SCALE_DEFAULT)
        );
        jLabel6.setIcon(imageIcon);

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel5.setText("Ingeniería de Software II");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel7.setText("Abril 28, 2017");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2)
                            .addComponent(jLabel7))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 416, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(101, 101, 101))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addGap(0, 417, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("About", jPanel3);

        jMenu1.setText("File");

        jMenuItem2.setText("Open Source Code");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TruthTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TruthTableActionPerformed
        truthTable
                = CheckTruthTable(
                        truthTable,
                        jComboBoxBooleanExp.getSelectedItem().toString()
                );
        if (truthTable != null) {
            PopulateTable2(truthTable.print());
        }

    }//GEN-LAST:event_TruthTableActionPerformed

    private void GACCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GACCActionPerformed
        // TODO add your handling code here:
        truthTable
                = CheckTruthTable(
                        truthTable,
                        jComboBoxBooleanExp.getSelectedItem().toString()
                );
        if (truthTable != null) {
            PopulateTable1(truthTable.GACC());
        }
    }//GEN-LAST:event_GACCActionPerformed

    private void RICCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RICCActionPerformed
        // TODO add your handling code here:
        truthTable
                = CheckTruthTable(
                        truthTable,
                        jComboBoxBooleanExp.getSelectedItem().toString()
                );
        if (truthTable != null) {
            PopulateTable1(truthTable.RICC());
        }
    }//GEN-LAST:event_RICCActionPerformed

    private void jTextFieldInitNodesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldInitNodesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldInitNodesActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        jTextArea2.setText("");
        //PArras
        jTextArea2.setText(abrirArchivo());

        analizar();
//        aquí debe de ir el enlace hacía la 2da parte
       newGraph
                = new Graph(
                        System.getProperty("user.dir")
                        + "/" + "Salidas" + "/" + fileName + "_main.txt");
        newGraph.runner();

        jTextFieldInitNodes.setText(Integer.toString(newGraph.getInit()));
        jTextFieldFinalNodes.setText(Integer.toString(newGraph.getEnd()));

        newGraph.printData();
        PopulateComboBox(BooleanExpressionsManager.getList());


    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButtonEPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEPCActionPerformed
        // TODO add your handling code here:
       PopulateTable3(newGraph.getEpc(), jButtonEPC.getText());
    }//GEN-LAST:event_jButtonEPCActionPerformed

    private void jButtonUsesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUsesActionPerformed
        // TODO add your handling code here:
        PopulateTable3(newGraph.getUses(), jButtonUses.getText());
    }//GEN-LAST:event_jButtonUsesActionPerformed

    private void jButtonDefsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDefsActionPerformed
        // TODO add your handling code here:
        PopulateTable3(newGraph.getDefs(), jButtonDefs.getText());
    }//GEN-LAST:event_jButtonDefsActionPerformed

    private void jButtonPrimePathsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrimePathsActionPerformed
        // TODO add your handling code here:
       PopulateTable3(newGraph.getPrimeAux(), jButtonPrimePaths.getText());
    }//GEN-LAST:event_jButtonPrimePathsActionPerformed

    private void CACCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CACCActionPerformed
        // TODO add your handling code here:
        truthTable
                = CheckTruthTable(
                        truthTable,
                        jComboBoxBooleanExp.getSelectedItem().toString()
                );
        if (truthTable != null) {
            PopulateTable1(truthTable.CACC());
        }
    }//GEN-LAST:event_CACCActionPerformed

    private void RACCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RACCActionPerformed
        // TODO add your handling code here:
        truthTable
                = CheckTruthTable(
                        truthTable,
                        jComboBoxBooleanExp.getSelectedItem().toString()
                );
        if (truthTable != null) {
            PopulateTable1(truthTable.RACC());
        }
    }//GEN-LAST:event_RACCActionPerformed

    private void GICCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GICCActionPerformed
        // TODO add your handling code here:
        truthTable
                = CheckTruthTable(
                        truthTable,
                        jComboBoxBooleanExp.getSelectedItem().toString()
                );
        if (truthTable != null) {
            PopulateTable1(truthTable.GICC());
        }
    }//GEN-LAST:event_GICCActionPerformed

    private void PopulateComboBox(ArrayList<BooleanExpresion> m_al) {
//        jComboBoxBooleanExp = new JComboBox<>();
        for (BooleanExpresion bol : m_al) {
            jComboBoxBooleanExp.addItem(bol.getExpresion());
        }
    }

    private TruthTable CheckTruthTable(TruthTable tmp, String expression) {
        if (tmp == null && expression.length() > 0) {
            tmp = new TruthTable(expression);
        } else if (expression.length() > 0) {
            tmp = new TruthTable(expression);
        } else {
            return null;
        }
        return tmp;
    }

    public void RecreateTable1() {
        this.model1 = new DefaultTableModel();

        model1.addColumn(as_columns1[0]);
        model1.addColumn(as_columns1[1]);

        jTable1.setModel(model1);
    }

    public void PopulateTable1(ArrayList<String> m_al) {
        RecreateTable1();

        for (int i = 0; i < m_al.size(); i++) {
            model1.addRow(m_al.get(i).split("\t"));
        }

        jTable1.setModel(model1);
    }

    public void PopulateTable2(ArrayList<String> m_al) {
        RecreateTable2(m_al.get(0));

        for (int i = 1; i < m_al.size(); i++) {
            model2.addRow(m_al.get(i).split("\t"));
        }

        jTable2.setModel(model2);
    }

    public void PopulateTable3(ArrayList m_al, String header) {

        RecreateTable3(header);
        Vector vector;
        for (int i = 0; i < m_al.size(); i++) {

            vector = new Vector();
            if (m_al.get(i).toString().length() > 2) {
                vector.add(m_al.get(i));
                model3.addRow(
                        vector
                );
            }

        }

        jTable3.setModel(model3);
    }

    public void RecreateTable2(String header) {
        this.model2 = new DefaultTableModel();

        String[] m_sHeader = header.split("\t");

        for (int i = 0; i < m_sHeader.length; i++) {
            model2.addColumn(m_sHeader[i]);
        }

        jTable2.setModel(model2);
    }

    public void RecreateTable2() {
        this.model2 = new DefaultTableModel();

        model2.addColumn(as_columns2[0]);
        model2.addColumn(as_columns2[1]);
        model2.addColumn(as_columns2[2]);

        jTable2.setModel(model2);
    }

    public void RecreateTable3(String header) {
        this.model3 = new DefaultTableModel();

        model3.addColumn(header);

        jTable3.setModel(model3);
    }

    public void RecreateTable3() {
        this.model3 = new DefaultTableModel();

        model3.addColumn(as_columns3[0]);

        jTable3.setModel(model3);
    }

    private String abrirArchivo() {
        String aux = "";
        String texto;
        texto = "";
        try {
            JFileChooser file = new JFileChooser(System.getProperty("user.dir") + "/programasC");
            file.showOpenDialog(this);
            File abre = file.getSelectedFile();
            fileName = file.getName(abre).replace(".c", "");
            if (abre != null) {
                FileReader archivos = new FileReader(abre);
                BufferedReader lee = new BufferedReader(archivos);
                while ((aux = lee.readLine()) != null) {
                    texto += aux + "\n";
                }
                lee.close();
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex + ""
                    + "\nNo se ha encontrado el archivo",
                    "ADVERTENCIA!!!", JOptionPane.WARNING_MESSAGE);
        }
        return texto;
    }

    private void analizar() {
        try {
            jComboBoxBooleanExp.removeAllItems();
            msj = "";
            // TODO add your handling code here:
            String Cadena = jTextArea2.getText();
            /*ESTA CÓDIGO ME SIRVE PARA JALAR EL TEXTO Y QUE LO ANALIZE EL PARSER*/
            p = new parser(new Yylex(new BufferedReader(new StringReader(Cadena))));
            /*LLAMO AL ANALIZADOR SINTÁCTICO*/
            p.parse();
            /*OOLEXP ES UNA LISTA CON LAS EXPRESIONES BOOLEANAS PERO DE TODO EL PROGRAMA*/
 /*se puede usar para la evaluación de predicados*/
            String exps = p.action_obj.boolexp.toString();
            BooleanExpressionsManager.setList(p.action_obj.boolexp);
            msj = msj + "digraph G {\nnode [style=filled];\n";
            LinkedList<functionIndex> fn = p.action_obj.fnList;
            /*genero el objeto que tiene la referencia de las funciones*/
            for (functionIndex c : fn) {
                CGraph graph = new CGraph();
                graph.addBeginNode(c.getStart());
                graph.addEndNode(c.getEnd());
                graph.resetMappedIds();
                //graph.compressNodes();
                mm = "%size%" + "\n";
                mm = mm + graph.getBeginNode().getMappedId() + "\n";
                mm = mm + graph.getEndNode().getMappedId() + "\n";
                explore(graph.getBeginNode());
                mm = mm.replace("%size%", labels.size() + "");
                labels.clear();
                added.clear();
                mm = mm + allDefs + allUses;
                write("/Salidas/" + fileName + "_" + c.getName(), mm);
                mm = "";
                allDefs = "";
                allUses = "";
                /*LOS GRAFOS DEL CGRAPHMANAGER TIENEN LAS REFERENCIAS A LAS CABEZAS*/
                CGraphManager.addGraph(c.getName(), graph);
            }
            msj = msj + "}";
            write("/GrafoTexto/" + fileName, msj);
            generateImg(fileName, "png");
            /*Imprimo la lista de expresiones booleanas*/
//            JOptionPane.showMessageDialog(null, exps);
            Thread.sleep(1000);
           /* ImageIcon imageIcon
                    = new ImageIcon(
                            new ImageIcon(
                                    System.getProperty("user.dir") + "/GrafoImg/" + fileName + "." + "png"
                            )
                            .getImage()
                            .getScaledInstance(
                                    600,
                                    600,
                                    Image.SCALE_AREA_AVERAGING
                            )
                    );*/
            jLabelGraph.setIcon(new ImageIcon(System.getProperty("user.dir") + "/GrafoImg/" + fileName + "." + "png"));
        } catch (Exception ex) {
            Logger.getLogger(Entorno.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void explore(CNode n) {
        String m = "";
        String defs = "";
        String uses = "";
        String m2 = "";

        if (n.m_pLeftNode != null && n.m_pRightNode == null && !n.m_GExplored) {
            m = "" + /*n.getMappedId()
                    + " " */ +n.m_pLeftNode.getMappedId() + "\n";
            defs = "" +/* n.getMappedId()
                    + " " + */ n.defsToString() + "\n";
            uses = "" + /*n.getMappedId()
                    + " " + */ n.usesToString() + "\n";
            m2 = "" + n.getId()
                    + " " + n.m_pLeftNode.getId() + "\n";
            labels.add(n.getId());
            labels.add(n.m_pLeftNode.getId());
            boolean band = false;
            /*checo que no se repitan*/
            for (int i = 0; i < added.size(); i++) {
                if (m2.equals(added.get(i))) {
                    band = true;
                    break;
                }
            }
            added.add(m2);
            if (!band) {
                msj = msj + getNodeString(n, n.m_pLeftNode, false);
                mm = mm + m;
                allDefs = allDefs + defs;
                allUses = allUses + uses;
            }
            n.m_GExplored = true;
            explore(n.m_pLeftNode);
        } else if (n.m_pRightNode != null) {
            m = "" + /*n.getMappedId()
                    + " "  +*/ n.m_pLeftNode.getMappedId() + " " + n.m_pRightNode.getMappedId() + "\n";
            defs = "" + /*n.getMappedId()
                    + " " +*/ n.defsToString() + "\n";
            uses = "" + /*n.getMappedId()
                    + " " + */ n.usesToString() + "\n";
            m2 = "" + n.getId()
                    + +n.m_pLeftNode.getId() + " " + n.m_pRightNode.getId() + "\n";
            labels.add(n.getId());
            labels.add(n.m_pRightNode.getId());
            boolean band = false;
            for (int i = 0; i < added.size(); i++) {
                if (m2.equals(added.get(i))) {
                    band = true;
                    break;
                }
            }
            added.add(m2);
            if (!band) {
                msj = msj + getNodeString(n, n.m_pLeftNode, true);
                msj = msj + getNodeString(n, n.m_pRightNode, true);
                mm = mm + m;
                allDefs = allDefs + defs;
                allUses = allUses + uses;
            }
            n.m_GExplored = true;
            explore(n.m_pLeftNode);
            explore(n.m_pRightNode);
        } else if (!n.m_GExplored) {
            mm += " \n";
            allDefs += "\n";
            allUses += "\n";
        }
    }

    /**
     * ESCRIBIR EN UN FICHERO
     *
     * @param name
     * @param cont
     */
    public void write(String name, String cont) {
        FileWriter fichero = null;
        BufferedWriter pw = null;
        try {
            fichero = new FileWriter(System.getProperty("user.dir") + name + ".txt");
            pw = new BufferedWriter(fichero);
            pw.write(cont);
            pw.close();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
    }

    public String getNodeString(CNode n1, CNode n2, boolean color) {
        String cad = "";
        if (color) {
            cad = cad + "\"" + n1.getMappedId() + ": " + n1.getId() + ": "
                    + n1.getSingleCodeLine().replaceAll("\"", "``")
                    + " \ndefs : " + n1.m_lstDefs.toString() + " uses : " + n1.m_lstUses + "\""
                    + "[color=coral][shape=rectangle]\n";
        }
        cad = cad + "\"" + n1.getMappedId() + ": " + n1.getId() + ": "
                + n1.getSingleCodeLine().replaceAll("\"", "``")
                + " \ndefs : " + n1.m_lstDefs.toString() + " uses : " + n1.m_lstUses + "\"" + "->"
                + "\"" + n2.getMappedId() + ": " + n2.getId() + ": "
                + n2.getSingleCodeLine().replaceAll("\"", "``")
                + " \ndefs : " + n2.m_lstDefs.toString() + " uses : " + n2.m_lstUses + "\"\n";
        return cad;

    }

    public void generateImg(String fileName, String format) {
        try {
            String cmd = ConfigProject.cmdGraphviz + " -T" + format + " " + System.getProperty("user.dir") + "/GrafoTexto/" + fileName + ".txt "
                    + "-o " + System.getProperty("user.dir") + "/GrafoImg/" + fileName + "." + format;
            Runtime.getRuntime().exec(cmd);
        } catch (IOException ioe) {
            System.out.println(ioe);
        }
    }

    protected JComponent makeTextPanel(String text) {
        JPanel panel = new JPanel(false);
        JLabel filler = new JLabel(text);
        filler.setHorizontalAlignment(JLabel.CENTER);
        panel.setLayout(new GridLayout(1, 1));
        panel.add(filler);
        return panel;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CACC;
    private javax.swing.JButton GACC;
    private javax.swing.JButton GICC;
    private javax.swing.JButton RACC;
    private javax.swing.JButton RICC;
    private javax.swing.JButton TruthTable;
    private javax.swing.JButton jButtonDefs;
    private javax.swing.JButton jButtonEPC;
    private javax.swing.JButton jButtonPrimePaths;
    private javax.swing.JButton jButtonUses;
    private javax.swing.JComboBox<String> jComboBoxBooleanExp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelGraph;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextFieldFinalNodes;
    private javax.swing.JTextField jTextFieldInitNodes;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
}
